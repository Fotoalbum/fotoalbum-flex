<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				width="80" height="80" 
				autoDrawBackground="false" currentState="normal"
				filters="{dropShadow}" 
				rollOut="_rollOutHandler(event)"
				rollOver="_rollOverHandler(event)"
				mouseDown="_mouseDownHandler(event)"
				mouseUp="_mouseUpHandler(event)"
				dragEnter="_dragEnterHandler(event)"
				dragExit="_dragExitHandler(event)"
				dragDrop="_dragDropHandler(event)">
	
	<s:states>
		<s:State name="normal" />
		<s:State name="dragging" />
	</s:states>
	
	<fx:Declarations>
		<s:DropShadowFilter id="dropShadow" distance="2" color="0" alpha=".6" angle="45" blurX="5" blurY="5" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import classes.Singleton;
			
			import events.updateTimelineEvent;
			import events.updateTimelinePhotoPreviewEvent;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.graphics.BitmapScaleMode;
			import mx.managers.DragManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.BorderContainer;
			import spark.components.Image;
			import spark.layouts.HorizontalAlign;
			import spark.layouts.VerticalAlign;
			
			[Embed(source="../assets/iconset/fotovak-pijl.swf")]
			[Bindable] private var addphoto:Class;
			
			[Bindable] public var singleton:Singleton = Singleton.getInstance();
			override public function set data(value:Object):void {
				
				super.data = value; // set the Item Renderer's data object
				
				_creationCompleteHandler();
				
			}
			
			public function _creationCompleteHandler():void
			{
				
				if (data) {
					
					if (data.exif) {
						
						/*
						var rot:String = data.exif.@orientation.toString();
						
						//Check for the orientation now and correct it if necessary!
						switch (rot) {
							case "1": //Normal orientation
								imgContainer.rotation = 0;
								break;
							case "6": //Right rotation 90 degrees
								imgContainer.rotation = 90;
								break;
							case "8": //Left rotation 270 degrees
								imgContainer.rotation = -90;
								break;
							case "3": //180 degrees
								imgContainer.rotation = 180;
								break;
						}
						*/
						
						imgContainer.verticalCenter = 0;
						imgContainer.horizontalCenter = 0; 
						imgContainer.validateNow();
						
					}
					
					if (data.@status == "done") {
						
						if (data.@origin == "3rdparty") {
							
							var request:URLRequest = new URLRequest(encodeURI(data.@thumb_url));
							var context:LoaderContext = new LoaderContext();
							context.checkPolicyFile = true;
							if (Capabilities.isDebugger == false) {
								context.securityDomain = SecurityDomain.currentDomain;
								context.applicationDomain = ApplicationDomain.currentDomain;
							}
							
							var loader:Loader = new Loader();
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE, on3rdPartyComplete);
							loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onError);
							loader.load(request, context);
							
						} else {
							
							request = new URLRequest(encodeURI(singleton.assets_url + data.@thumb_url));
							context = new LoaderContext();
							context.checkPolicyFile = true;
							if (Capabilities.isDebugger == false) {
								context.securityDomain = SecurityDomain.currentDomain;
								context.applicationDomain = ApplicationDomain.currentDomain;
							}
							
							loader = new Loader();
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
							loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onError);
							loader.load(request, context);
							
						}
						
						
					} else { //Get the imagesource based on the id
					
						if (data.@status == "empty") {
							
							//Create a photo placeholder here
							var icon:SWFLoader = new SWFLoader();
							icon.source = addphoto;
							icon.width = 80;
							icon.height = 80;
							icon.horizontalCenter = 0;
							icon.verticalCenter = 0;
							icon.scaleContent = true;
							icon.maintainAspectRatio = true;
							icon.mouseEnabled = false;
							
							if (imgContainer.numElements == 1) {
								imgContainer.addElement(icon);
							}
							
						} else {
							
							//Get the imagesource based on the id
							var found:Boolean = false;
							
							while (!found) {
							
								for (var x:int=0; x < singleton.userphotosforupload.length; x++) {
									if (singleton.userphotosforupload.getItemAt(x).id == data.@original_image_id) {
										img.source = singleton.userphotosforupload.getItemAt(x).source.clone();
										found = true;
										break;
									}
								}
								
								if (singleton.userphotosforuploadhidden) {
									for (x=0; x < singleton.userphotosforuploadhidden.length; x++) {
										if (singleton.userphotosforuploadhidden.getItemAt(x).id == data.@original_image_id) {
											img.source = singleton.userphotosforuploadhidden.getItemAt(x).source.clone();
											found = true;
											break;
										}
									}
								}
							}
							
							if (imgContainer.numElements == 2) {
								imgContainer.removeElementAt(1);
							}
							
							img.scaleMode = BitmapScaleMode.LETTERBOX;
							img.verticalAlign = VerticalAlign.MIDDLE;
							img.horizontalAlign = HorizontalAlign.CENTER;
							img.horizontalCenter = 0;
							img.verticalCenter = 0;
							img.validateNow();
						}
					}
				}
			}	
			
			private function on3rdPartyComplete(e:Event):void 
			{
				
				img.source = e.target.content;
				img.horizontalCenter = 0;
				img.verticalCenter = 0;
				img.scaleMode = BitmapScaleMode.LETTERBOX;
				img.verticalAlign = VerticalAlign.MIDDLE;
				img.horizontalAlign = HorizontalAlign.CENTER;
				img.validateNow();
				
			}
			
			private function onComplete(e:Event):void 
			{
				
				img.source = e.target.content;
				img.horizontalCenter = 0;
				img.verticalCenter = 0;
				img.scaleMode = BitmapScaleMode.LETTERBOX;
				img.verticalAlign = VerticalAlign.MIDDLE;
				img.horizontalAlign = HorizontalAlign.CENTER;
				img.validateNow();
				
			}
			
			private function onError(e:Event):void {
				singleton.ShowMessage("Er is een fout opgetreden", "Neem kontakt op met de helpdesk en geef onderstaand bericht door:\n " + e.toString());
			}
			
			protected function _rollOverHandler(event:MouseEvent):void
			{
				if (btnDelete) {
					btnDelete.visible = true;
				}
			}
			
			protected function _rollOutHandler(event:MouseEvent):void
			{
				if (btnDelete) {
					btnDelete.visible = false;
				}
			}
			
			protected function btnDelete_clickHandler(event:MouseEvent):void
			{
				
				try {
					
					if (data) {
					
						var done:Boolean = false;
						
						for (var x:int=0; x < singleton.albumtimeline.length; x++) {
							
							if (done) {
								break;
							}
							
							var pages:XMLList = singleton.albumtimeline.getItemAt(x)..page;
							
							for (var p:int=0; p < pages.length(); p++) {
								
								if (data.@pageID == pages[p].@pageID) {
									
									var elements:XMLList = pages[p]..element;
									var spreadelements:XMLList = singleton.albumtimeline.getItemAt(x).elements..element;
									
									for (var e:int=0; e < elements.length(); e++) {
										
										if (elements[e].@id == data.@id) {
											
											delete elements[e];
											
											for (var s:int=0; s < spreadelements.length(); s++) {
												if (spreadelements[s].@id == data.@id) {
													delete spreadelements[e];
													break;
												}
											}
											
											//Redesign the page layout
											var numPhotos:int = 0;
											var numText:int = 0;
											
											for each (var elm:XML in elements) {
												if (elm.@type == "photo") {
													numPhotos++;
												}
												if (elm.@type == "text") {
													numText++;
												}
											}
												
											var pagelayout:Object = singleton.GetRandomPagelayoutOnFixedNumPhotos(numPhotos, numText) as Object;
											var autoElements:XMLList = XML(pagelayout.layout)..item;
											var pageWidth:Number = 0;
											var pageHeight:Number = 0; 
											var margin:Number = 0;
											
											if (pages[p].@type == "coverback" || pages[p].@type == "coverfront") {
												pageWidth = singleton._defaultCoverWidth + singleton._defaultCoverWrap + singleton._defaultCoverBleed;
												pageHeight = singleton._defaultCoverHeight + (2 * singleton._defaultCoverWrap) + (2 * singleton._defaultCoverBleed);
												if (pages[p].@type == "coverfront") {
													margin = singleton._defaultCoverWidth + singleton._defaultCoverWrap + singleton._defaultCoverBleed + singleton._defaultCoverSpine;
												} else {
													margin = 0;
												}
											} else {
												pageWidth = singleton._defaultPageWidth + singleton._defaultPageBleed;
												pageHeight = singleton._defaultPageHeight + (2 * singleton._defaultPageBleed);
												if (pages[p].@side == "right") {
													margin = singleton._defaultPageWidth + singleton._defaultPageBleed;
												} else {
													margin = 0;
												}
											}
											
											//Update all the photos on this page
											var counter:int = 0;
											
											for (var q:int=0; q < (numPhotos + numText); q++) {
												
												var auto:XML = autoElements[counter].copy();
												
												if (elements[q].@type == "photo") {
												
													elements[q].@objectX = margin + ((parseFloat(auto.@left.toString()) / 100) * pageWidth);
													elements[q].@objectY = (parseFloat(auto.@top.toString()) / 100) * pageHeight;
													elements[q].@objectWidth = pageWidth - ((parseFloat(auto.@right.toString()) / 100) * pageWidth) - parseFloat(elements[q].@objectX) + margin;
													elements[q].@objectHeight = pageHeight - ((parseFloat(auto.@bottom.toString()) / 100) * pageHeight) - parseFloat(elements[q].@objectY);
													elements[q].@rotation = auto.@r;
													
													//Calculate
													singleton.CalculateImageZoomAndPosition(elements[q]);
													
													/* Get the other info from the original image */
													elements[q].@refOffsetX = elements[q].@offsetX;
													elements[q].@refOffsetY = elements[q].@offsetY;
													elements[q].@refWidth = elements[q].@imageWidth;
													elements[q].@refHeight = elements[q].@imageHeight;
													elements[q].@refScale = elements[q].@scaling;
													
													counter++;
												}
												
												if (elements[q].@type == "text") {
													
													elements[q].@objectX = margin + ((parseFloat(auto.@left.toString()) / 100) * pageWidth);
													elements[q].@objectY = (parseFloat(auto.@top.toString()) / 100) * pageHeight;
													elements[q].@objectWidth = pageWidth - ((parseFloat(auto.@right.toString()) / 100) * pageWidth) - parseFloat(elements[q].@objectX) + margin;
													elements[q].@objectHeight = pageHeight - ((parseFloat(auto.@bottom.toString()) / 100) * pageHeight) - parseFloat(elements[q].@objectY);
													elements[q].@rotation = auto.@r;
													
													counter++;
												}
											}
											
											singleton.albumtimeline.getItemAt(x).elements.setChildren(singleton.albumtimeline.getItemAt(x).pages..element.copy());
											
											//Reorder the elements
											singleton.albumtimeline.getItemAt(x).elements.setChildren(singleton.ReorderElementsInTimeline(singleton.albumtimeline.getItemAt(x).elements..element)..element.copy());
											
											FlexGlobals.topLevelApplication.dispatchEvent(new updateTimelineEvent(updateTimelineEvent.UPDATETIMELINEPAGE, null, null, pages[p]));
											
											done = true;
											break;
										}
									}
								}
							}
						}
						
						singleton._changesMade = true;
						singleton.UpdateWindowStatus();
						
					}
				} catch (err:Error) {
					
					trace(err.toString());
				}
			}
			
			protected function _mouseDownHandler(event:MouseEvent):void
			{
				
				currentState = "dragging";
				
				singleton.selectedPhotoDataForDrag = data;
				singleton.selectedPhotoForDrag = this;
				
				event.currentTarget.addEventListener(MouseEvent.MOUSE_MOVE, DragItem);
				event.currentTarget.addEventListener(DragEvent.DRAG_COMPLETE, dragComplete);
				
			}
			
			private function DragItem(event:MouseEvent):void 
			{
				
				//Start drag
				var ds:DragSource = new DragSource();
				ds.addData("PHOTO", "type");
				ds.addData(singleton.selectedPhotoDataForDrag, "data");
				
				DragManager.doDrag(event.currentTarget as UIComponent, ds, event);
				
				event.currentTarget.removeEventListener(MouseEvent.MOUSE_MOVE, DragItem);
			}
			
			private function dragComplete(event:DragEvent):void 
			{
				
				event.currentTarget.removeEventListener(MouseEvent.MOUSE_MOVE, DragItem);
				event.currentTarget.removeEventListener(DragEvent.DRAG_COMPLETE, dragComplete);
				
			}
			
			protected function _mouseUpHandler(event:MouseEvent):void
			{
				
				event.currentTarget.removeEventListener(MouseEvent.MOUSE_MOVE, DragItem);
				event.currentTarget.removeEventListener(DragEvent.DRAG_COMPLETE, dragComplete);
				
				currentState = "normal";
				
			}
			
			protected function _dragEnterHandler(event:DragEvent):void
			{
				
				if (event.dragSource.dataForFormat("type").toString() == "PHOTO") {
				
					DragManager.acceptDragDrop(event.currentTarget as UIComponent);
					drop.visible = true;
				}
			}
			
			protected function _dragExitHandler(event:DragEvent):void
			{
				drop.visible = false;
			}
			
			protected function _dragDropHandler(event:DragEvent):void
			{
				
				drop.visible = false;
				
				event.preventDefault();
				
				//Update the image for this container
				singleton._changesMade = true;
				singleton.UpdateWindowStatus();
				
				if (singleton.selectedPhotoDataForDrag) {
					
					var sourcePageID:String = singleton.selectedPhotoDataForDrag.@pageID.toString();
					var sourceElementID:String = singleton.selectedPhotoDataForDrag.@id.toString();
						
					var targetImage:XML = data.copy();
					
					//Update the current image with the dropped image
					if (singleton.selectedPhotoDataForDrag.@lowres_url.toString() == "" || singleton.selectedPhotoDataForDrag.@lowres_url.toString() == "null") {
						
						data.@original_image_id = singleton.selectedPhotoDataForDrag.@original_image_id;
						data.@thumb = "";
						data.@thumb_url = "";
						data.@lowres = "";
						data.@lowres_url = "";
						data.@hires = "";
						data.@hires_url = "";
						data.@fullPath = "";
						data.@path = "";
						data.@dateCreated = "";
						data.@timeCreated = "";
						data.@folderID = "";
						data.@folderName = ""
						
					} else {
						
						data.@original_image_id = "";
						data.@thumb = singleton.selectedPhotoDataForDrag.@thumb;
						data.@thumb_url = singleton.selectedPhotoDataForDrag.@thumb_url;
						data.@lowres = singleton.selectedPhotoDataForDrag.@lowres;
						data.@lowres_url = singleton.selectedPhotoDataForDrag.@lowres_url;
						data.@hires = singleton.selectedPhotoDataForDrag.@hires;
						data.@hires_url = singleton.selectedPhotoDataForDrag.@hires_url;
						data.@dateCreated = singleton.selectedPhotoDataForDrag.@dateCreated;
						data.@timeCreated = singleton.selectedPhotoDataForDrag.@timeCreated;
						data.@folderID = singleton.selectedPhotoDataForDrag.@folderID;
						data.@folderName = singleton.selectedPhotoDataForDrag.@folderName;
					}
					
					data.@status = singleton.selectedPhotoDataForDrag.@status;
					data.@origin = singleton.selectedPhotoDataForDrag.@origin;
					data.@origin_type = singleton.selectedPhotoDataForDrag.@origin_type;
					data.@originalWidth = singleton.selectedPhotoDataForDrag.@originalWidth;
					data.@originalHeight = singleton.selectedPhotoDataForDrag.@originalHeight;
					data.exif = singleton.selectedPhotoDataForDrag.exif.copy();
					data.@otherproject = singleton.selectedPhotoDataForDrag.@otherproject;
					data.@photoRefID = singleton.selectedPhotoDataForDrag.@photoRefID;
					data.@selectedforupload = singleton.selectedPhotoDataForDrag.@selectedforupload;
					data.@bytesize = singleton.selectedPhotoDataForDrag.@bytesize;
					data.@refdir = singleton.selectedPhotoDataForDrag.@refdir;
					data.@preview = singleton.selectedPhotoDataForDrag.@preview;
					
					singleton.CalculateImageZoomAndPosition(data);
					
					/* Get the other info from the original image */
					data.@refOffsetX = data.@offsetX;
					data.@refOffsetY = data.@offsetY;
					data.@refWidth = data.@imageWidth;
					data.@refHeight = data.@imageHeight;
					data.@refScale = data.@scaling;
					
					_creationCompleteHandler();
					
					//Update the photo preview
					FlexGlobals.topLevelApplication.dispatchEvent(new updateTimelinePhotoPreviewEvent(updateTimelinePhotoPreviewEvent.UPDATETIMELINEPHOTOPREVIEW, data.@id, data));
					
					//Update the data in the dragged object as well
					if (singleton.selectedPhotoDataForDrag.@id != targetImage.@id) {
						
						if (targetImage.@thumb != "" && targetImage.@thumb != "null") {
							singleton.selectedPhotoDataForDrag.@original_image_id = "";
							singleton.selectedPhotoDataForDrag.@thumb = targetImage.@thumb;
							singleton.selectedPhotoDataForDrag.@thumb_url = targetImage.@thumb_url;
							singleton.selectedPhotoDataForDrag.@lowres = targetImage.@lowres;
							singleton.selectedPhotoDataForDrag.@lowres_url = targetImage.@lowres_url;
							singleton.selectedPhotoDataForDrag.@hires = targetImage.@hires;
							singleton.selectedPhotoDataForDrag.@hires_url = targetImage.@hires_url;
							singleton.selectedPhotoDataForDrag.@dateCreated = targetImage.@dateCreated;
							singleton.selectedPhotoDataForDrag.@timeCreated = targetImage.@timeCreated;
							singleton.selectedPhotoDataForDrag.@folderID = targetImage.@folderID;
							singleton.selectedPhotoDataForDrag.@folderName = targetImage.@folderName;
							
						} else {
							singleton.selectedPhotoDataForDrag.@original_image_id = targetImage.@original_image_id;
							singleton.selectedPhotoDataForDrag.@thumb = "";
							singleton.selectedPhotoDataForDrag.@thumb_url = "";
							singleton.selectedPhotoDataForDrag.@lowres = "";
							singleton.selectedPhotoDataForDrag.@lowres_url = "";
							singleton.selectedPhotoDataForDrag.@hires = "";
							singleton.selectedPhotoDataForDrag.@hires_url = "";
							singleton.selectedPhotoDataForDrag.@dateCreated = "";
							singleton.selectedPhotoDataForDrag.@timeCreated = "";
							singleton.selectedPhotoDataForDrag.@folderID = "";
							singleton.selectedPhotoDataForDrag.@folderName = "";
						}
						
						singleton.selectedPhotoDataForDrag.@originalWidth = targetImage.@originalWidth;
						singleton.selectedPhotoDataForDrag.@originalHeight = targetImage.@originalHeight;
						singleton.selectedPhotoDataForDrag.@status = targetImage.@status;
						singleton.selectedPhotoDataForDrag.@origin = targetImage.@origin;
						singleton.selectedPhotoDataForDrag.@origin_type = targetImage.@origin_type;
						singleton.selectedPhotoDataForDrag.exif = targetImage.@exif.copy();
						singleton.selectedPhotoDataForDrag.@otherproject = targetImage.@otherproject;
						singleton.selectedPhotoDataForDrag.@photoRefID = targetImage.@photoRefID;
						singleton.selectedPhotoDataForDrag.@selectedforupload = targetImage.@selectedforupload;
						singleton.selectedPhotoDataForDrag.@bytesize = targetImage.@bytesize;
						singleton.selectedPhotoDataForDrag.@refdir = targetImage.@refdir;
						singleton.selectedPhotoDataForDrag.@preview = targetImage.@preview;
						
						if (singleton.selectedPhotoDataForDrag.@status != "empty") {
							
							singleton.CalculateImageZoomAndPosition(singleton.selectedPhotoDataForDrag);
						
							/* Get the other info from the original image */
							singleton.selectedPhotoDataForDrag.@refOffsetX = singleton.selectedPhotoDataForDrag.@offsetX;
							singleton.selectedPhotoDataForDrag.@refOffsetY = singleton.selectedPhotoDataForDrag.@offsetY;
							singleton.selectedPhotoDataForDrag.@refWidth = singleton.selectedPhotoDataForDrag.@imageWidth;
							singleton.selectedPhotoDataForDrag.@refHeight = singleton.selectedPhotoDataForDrag.@imageHeight;
							singleton.selectedPhotoDataForDrag.@refScale = singleton.selectedPhotoDataForDrag.@scaling;
						
						} else {
							
							singleton.selectedPhotoDataForDrag.@imageWidth = 0;
							singleton.selectedPhotoDataForDrag.@imageHeight = 0;
							singleton.selectedPhotoDataForDrag.@offsetX = 0;
							singleton.selectedPhotoDataForDrag.@offsetY = 0;
							singleton.selectedPhotoDataForDrag.@scaling = 1;
							
							singleton.selectedPhotoDataForDrag.@refOffsetX = singleton.selectedPhotoDataForDrag.@offsetX;
							singleton.selectedPhotoDataForDrag.@refOffsetY = singleton.selectedPhotoDataForDrag.@offsetY;
							singleton.selectedPhotoDataForDrag.@refWidth = singleton.selectedPhotoDataForDrag.@imageWidth;
							singleton.selectedPhotoDataForDrag.@refHeight = singleton.selectedPhotoDataForDrag.@imageHeight;
							singleton.selectedPhotoDataForDrag.@refScale = singleton.selectedPhotoDataForDrag.@scaling;
							
						}
						
						//singleton.selectedPhotoForDrag.data = singleton.selectedPhotoDataForDrag;
						singleton.selectedPhotoForDrag._creationCompleteHandler();
						
						//Update the dragged object preview
						FlexGlobals.topLevelApplication.dispatchEvent(new updateTimelinePhotoPreviewEvent(updateTimelinePhotoPreviewEvent.UPDATETIMELINEPHOTOPREVIEW, singleton.selectedPhotoDataForDrag.@id, singleton.selectedPhotoDataForDrag));
						
						singleton.selectedPhotoDataForDrag = null;
						singleton.selectedPhotoForDrag = null;
						
					}
						
					
				} else {
				
					//Update the photo with the new dragged photo
					var object:Object = event.dragSource.dataForFormat("data") as Object;
					
					if (!object.lowres_url) {
						
						data.@original_image_id = object.id;
						data.@thumb = "";
						data.@thumb_url = "";
						data.@lowres = "";
						data.@lowres_url = "";
						data.@hires = "";
						data.@hires_url = "";
						data.@fullPath = "";
						data.@path = "";
						data.@dateCreated = "";
						data.@timeCreated = "";
						data.@folderID = "";
						data.@folderName = ""
						
					} else {
						
						data.@original_image_id = "";
						data.@thumb = object.thumb;
						data.@thumb_url = object.thumb_url;
						data.@lowres = object.lowres;
						data.@lowres_url = object.lowres_url;
						data.@hires = object.hires;
						data.@hires_url = object.hires_url;
						data.@dateCreated = object.dateCreated;
						data.@timeCreated = object.timeCreated;
						data.@folderID = object.folderID;
						data.@folderName = object.folderName;
					}
					
					data.@status = object.status;
					data.@origin = object.origin;
					data.@origin_type = object.origin_type;
					data.@originalWidth = object.originalWidth;
					data.@originalHeight = object.originalHeight;
					data.exif = object.exif.copy();
					data.@otherproject = object.otherproject;
					data.@photoRefID = object.photoRefID;
					data.@selectedforupload = object.selectedforupload;
					data.@bytesize = object.bytesize;
					data.@refdir = object.refdir;
					data.@preview = object.preview;
					
					singleton.CalculateImageZoomAndPosition(data);
					
					/* Get the other info from the original image */
					data.@refOffsetX = data.@offsetX;
					data.@refOffsetY = data.@offsetY;
					data.@refWidth = data.@imageWidth;
					data.@refHeight = data.@imageHeight;
					data.@refScale = data.@scaling;
					
					_creationCompleteHandler();
					
					//Update the photo preview
					FlexGlobals.topLevelApplication.dispatchEvent(new updateTimelinePhotoPreviewEvent(updateTimelinePhotoPreviewEvent.UPDATETIMELINEPHOTOPREVIEW, data.@id, data));
					
					singleton.selectedPhotoDataForDrag = null;
					singleton.selectedPhotoForDrag = null;
					
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="imgContainer" width="80" height="80" verticalCenter="0" horizontalCenter="0" >
		<s:BitmapImage id="img" width="80" height="80" verticalCenter="0" horizontalCenter="0" />
	</s:Group>
		
	<s:BorderContainer id="drop" width="80" height="80" mouseEnabled="false" 
					   backgroundColor="0xD2D2D2" alpha=".7" visible="false" />
	
	<s:SWFLoader id="btnDelete" width="20" height="20" left="-5" bottom="-5" source="@Embed('assets/iconset/kruisje.swf')" visible="false"
				 buttonMode="true" mouseEnabled="true" useHandCursor="true" click="btnDelete_clickHandler(event)"
				 excludeFrom="dragging" verticalAlign="middle" horizontalAlign="center" 
				 maintainAspectRatio="true" scaleContent="true" />
	
</s:ItemRenderer>
