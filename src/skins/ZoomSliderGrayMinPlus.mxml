<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	minHeight="4" alpha.disabled="0.5">

    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.HSlider")]
    ]]>
    </fx:Metadata> 
    
	<fx:Script>
    
		
		<![CDATA[
			import mx.core.FlexGlobals;
			
			import org.osmf.elements.F4MElement;
		
			[Bindable] public var myWidth:Number = 60;
			
			override protected function initializationComplete():void
			{
				useChromeColor = false;
				super.initializationComplete();
				
				myWidth = this.parent["uid"].toString();
			}
			
			override protected function measure() : void
	        {
	            // Temporarily move the thumb to the left of the Slider so measurement
	            // doesn't factor in its x position. This allows resizing the
	            // HSlider to less than 100px in width. 
	            var thumbPos:Number = thumb.getLayoutBoundsX();
	            thumb.setLayoutBoundsPosition(0, thumb.getLayoutBoundsY());
	            super.measure();
	            thumb.setLayoutBoundsPosition(thumbPos, thumb.getLayoutBoundsY());
	        }
	
			private function zoomOut(event:Event):void {
				try {
					if (event.currentTarget.parent.parent.parent.id == "zoomBar") {
						var currValue:Number = event.currentTarget.parent.parent.parent.value;
						var minValue:Number = event.currentTarget.parent.parent.parent.minimum;
						
						if (currValue > minValue) {
							event.currentTarget.parent.parent.parent.value -= .1;
							event.currentTarget.parent.parent.parent.validateNow();
							FlexGlobals.topLevelApplication.ZoomStage();
						}
					}
				} catch (err:Error) {
					trace("werkt niet!");
				}
			}
			
			private function zoomIn(event:Event):void {
				try {
					if (event.currentTarget.parent.parent.parent.id == "zoomBar") {
						var currValue:Number = event.currentTarget.parent.parent.parent.value;
						var maxValue:Number = event.currentTarget.parent.parent.parent.maximum;
						
						if (currValue < maxValue) {
							event.currentTarget.parent.parent.parent.value += .1;
							event.currentTarget.parent.parent.parent.validateNow();
							FlexGlobals.topLevelApplication.ZoomStage();
						}
					}
				} catch (err:Error) {
					trace("werkt niet!");
				}
			}
		]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <fx:Declarations>
        
    </fx:Declarations>
   
	<s:HGroup verticalAlign="middle" horizontalAlign="center" verticalCenter="0">
		
		<mx:LinkButton label="&#xf002;" fontFamily="_AppFontAwesomeMX" fontSize="14"
					   scaleX="-1" click="{zoomOut(event)}" color="0x58595B" />
		
		<s:Group>
			
			<s:Button id="track" left="0" right="0" verticalCenter="0" 
					  minWidth="{myWidth}"
					  tabEnabled="false" height="1"
					  skinClass="skins.SliderTrackGray" />
			
			<s:Button id="thumb" verticalCenter="0" width="8" 
					  tabEnabled="false"
					  skinClass="skins.SliderThumbGray" />
			
		</s:Group>
		
		<mx:LinkButton label="&#xf002;" fontFamily="_AppFontAwesomeMX" fontSize="22"
					   scaleX="-1" click="{zoomIn(event)}" color="0x58595B" />
		
	</s:HGroup>
	
	
</s:SparkSkin>
