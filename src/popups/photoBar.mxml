<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:classes="classes.*"
				   height="30" backgroundColor="#4e4e4e" borderVisible="false"
				   cornerRadius="0" creationComplete="_creationCompleteHandler(event)"
				   creationPolicy="all" currentState="basic" filters="{[toolbarShadow]}"
				   mouseDown="_mouseDownHandler(event)"
				   width.clipart="200"
				   width.photo="340">
	
	<s:states>
		<s:State name="basic"/>
		<s:State name="photo"/>
		<s:State name="clipart"/>
		<s:State name="multiselect"/>
		<s:State name="photoextra"/>
	</s:states>
	
	<fx:Declarations>
		<s:DropShadowFilter id="toolbarShadow" distance="5" color="0" alpha=".6" angle="45" blurX="10" blurY="10" />
		<s:DropShadowFilter id="leftShadowFilter" distance="3" color="0" alpha=".6" angle="135" blurX="8" blurY="8" />
		<s:DropShadowFilter id="rightShadowFilter" distance="3" color="0" alpha=".6" angle="45" blurX="8" blurY="8" />
		<s:DropShadowFilter id="bottomShadowFilter" distance="3" color="0" alpha=".6" angle="90" blurX="8" blurY="8" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import classes.Singleton;
			import classes.undoActions;
			
			import com.roguedevelopment.objecthandles.DragGeometry;
			import com.roguedevelopment.objecthandles.ObjectChangedEvent;
			import com.roguedevelopment.objecthandles.ObjectHandles;
			
			import components.photocomponent;
			import components.textcomponent;
			
			import events.barMenuEvent;
			import events.showPoofEvent;
			import events.textFlowEvent;
			import events.updateElementsEvent;
			
			import flash.text.engine.FontWeight;
			
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.formats.TextAlign;
			import flashx.textLayout.formats.TextDecoration;
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import itemrenderers.spreadEditor;
			import itemrenderers.spreadItemRenderer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			[Bindable] public var singleton:Singleton = Singleton.getInstance();
			[Bindable] public var oldData:Object;
			protected function _creationCompleteHandler(event:FlexEvent):void
			{
				FlexGlobals.topLevelApplication.addEventListener(barMenuEvent.SETBARENABLED, EnableBar);
				FlexGlobals.topLevelApplication.addEventListener(barMenuEvent.SETBARDISABLED, DisableBar);
			}
			
			private function EnableBar(event:barMenuEvent):void {
				this.enabled = true;
				this.mouseEnabled = true;
			}
			
			private function DisableBar(event:barMenuEvent):void {
				this.enabled = false;
				this.mouseEnabled = false;
			}
			
			protected function _mouseDownHandler(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
			}
			
			protected function bordercolor_changeHandler(event:ColorPickerEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				//UPDATE THE RGB/CMYK VALUES AS WELL!!
				var color:Object = new Object();
				color.id = event.color;
				color.rgb = singleton.GetRgb(color.id);
				color.cmyk = singleton.GetCMYK(color.id);
				singleton.colorcollection.addItem(color);
				
				singleton.selected_element.data.bordercolor = color.id;
				
				//Update the border
				singleton.selected_element.DrawBorder();
				
				if (!singleton.lastusedcolors) {
					singleton.lastusedcolors = new ArrayCollection();
				}
				
				if (singleton.lastusedcolors.getItemIndex(event.color.toString()) == -1) {
					singleton.lastusedcolors.addItemAt(event.color.toString(), 0);
				}
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			private function borderwidth_changeHandler(event:Event):void {
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				singleton.selected_element.data.borderweight = event.currentTarget.selectedItem;
				
				//Update the border
				singleton.selected_element.DrawBorder();
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			private function borderalpha_changeHandler(event:Event):void {
				
				singleton.selected_element.data.borderalpha = event.currentTarget.value / 100;
				
				//Update the border
				singleton.selected_element.DrawBorder();
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
			}	
			
			private function DeletePhoto():void {
				
				if (singleton.selected_element.constructor.toString() == "[class clipartcomponent]") {
					
					var oldData:Object = singleton.CloneObject(singleton.selected_element.data);
					
					var index:int = singleton.GetRealObjectIndex(singleton.selected_element);
					
					//Delete this component
					var elementContainer:Group = singleton.selected_element.parent as Group;
					elementContainer.removeElement(singleton.selected_element as IVisualElement);
					
					singleton.selected_element.parentObjectHandles.selectionManager.clearSelection();
					singleton.selected_element.graphics.clear();
					
					FlexGlobals.topLevelApplication.dispatchEvent(new showPoofEvent(showPoofEvent.POOF));
					
					FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.DELETE, singleton.selected_spread.spreadID, singleton.selected_element.data));
					
					var editor:spreadEditor = FlexGlobals.topLevelApplication.viewer.getElementAt(0) as spreadEditor;
					editor.photomenu.visible = false;
					
					singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_DELETE_ELEMENT, index);
					
				}
				
				if (singleton.selected_element.constructor.toString() == "[class photocomponent]") {
					
					//First delete the image if we have one, if not, delete the whole component
					if (singleton.selected_element.img) 
					{
						
						oldData = singleton.CloneObject(singleton.selected_element.data);
						
						singleton.selected_element.RemoveImage();
						
						//Update the data and update the navigation
						singleton.selected_element.data.hires = "";
						singleton.selected_element.data.hires_url = "";
						singleton.selected_element.data.fullPath = "";
						singleton.selected_element.data.bytesize = "0";
						singleton.selected_element.data.imageWidth = "";
						singleton.selected_element.data.imageHeight = "";
						singleton.selected_element.data.imageRotation = "0";
						singleton.selected_element.data.lowres = "";
						singleton.selected_element.data.lowres_url = "";
						singleton.selected_element.data.origin = "";
						singleton.selected_element.data.originalHeight = "";
						singleton.selected_element.data.originalWidth = "";
						singleton.selected_element.data.original_image_id = "";
						singleton.selected_element.data.path = "";
						singleton.selected_element.data.refHeight = "";
						singleton.selected_element.data.refWidth = "";
						singleton.selected_element.data.refOffsetX = "";
						singleton.selected_element.data.refOffsetY = "";
						singleton.selected_element.data.refScale = "";
						singleton.selected_element.data.status = "empty";
						singleton.selected_element.data.thumb = "";
						singleton.selected_element.data.thumb_url = "";
						
						singleton.selected_element.data.mask_original_id = "";
						singleton.selected_element.data.mask_original_width = "";
						singleton.selected_element.data.mask_original_height = "";
						singleton.selected_element.data.mask_hires = "";
						singleton.selected_element.data.mask_hires_url = "";
						singleton.selected_element.data.mask_lowres = "";
						singleton.selected_element.data.mask_lowres_url = "";
						singleton.selected_element.data.mask_thumb = "";
						singleton.selected_element.data.mask_thumb_url = "";
						singleton.selected_element.data.mask_path = "";
						
						singleton.selected_element.data.overlay_original_width = "";
						singleton.selected_element.data.overlay_original_height = "";
						singleton.selected_element.data.overlay_hires = "";
						singleton.selected_element.data.overlay_hires_url = "";
						singleton.selected_element.data.overlay_lowres = "";
						singleton.selected_element.data.overlay_lowres_url = "";
						singleton.selected_element.data.overlay_thumb = "";
						singleton.selected_element.data.overlay_thumb_url = "";
						
						if (singleton.selected_element.imageMask) {
							singleton.selected_element.removeElement(singleton.selected_element.imageMask);
							singleton.selected_element.imageMask = null;
						}
						
						singleton.selected_element.overlayGroup.removeAllElements();
						singleton.selected_element.imageOverlay = null;
						
						singleton.selected_element.qualityAlert.visible = false;
						
						FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.DELETEIMG, singleton.selected_spread.spreadID, singleton.selected_element.data));
						
						singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_DELETE_IMAGE, singleton.GetRealObjectIndex(singleton.selected_element));
						
					} else {
						
						//Delete this component
						oldData = singleton.CloneObject(singleton.selected_element.data);
						
						elementContainer = singleton.selected_element.parent as Group;
						elementContainer.removeElement(singleton.selected_element as IVisualElement);
						
						singleton.selected_element.parentObjectHandles.selectionManager.clearSelection();
						singleton.selected_element.graphics.clear();
						
						FlexGlobals.topLevelApplication.dispatchEvent(new showPoofEvent(showPoofEvent.POOF));
						
						FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.DELETE, singleton.selected_spread.spreadID, singleton.selected_element.data));
						
						editor = FlexGlobals.topLevelApplication.viewer.getElementAt(0) as spreadEditor;
						editor.photomenu.visible = false;
						
						singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_DELETE_IMAGE, singleton.GetRealObjectIndex(singleton.selected_element));
						
					}	
					
				}
				
			}
			
			protected function zoomSlider_changeHandler(event:Event):void
			{
				
				//Update the photo size and then the scaling value in the xml
				var po:photocomponent = singleton.selected_element as photocomponent;
				var data:Object = po.data as Object;
				
				if (po.img) {
					singleton.PhotoZoom(po, 1 + (zoom.value / 100));
				}
				
			}
			
			private function RotateImage(event:Event):void {
				
				// STORE THE OLD DATA FOR LATER UNDO //
				if (singleton.selected_element.img) {
					oldData = singleton.CloneObject(singleton.selected_element.data);
					
					//Get the image
					var obj:Object = singleton.selected_element;
					var ImageContainerRotation:Number = 0;
					var value:Number;
					
					if (event) {
						value = event.currentTarget.value;
					} else {
						value = parseInt(singleton.selected_element.data.imageRotation.toString()) + 90;
					}
					
					if (value > singleton.selected_element.data.imageRotation) {
						
						if (parseInt(singleton.selected_element.data.imageRotation.toString()) + 90 == 360) {
							singleton.selected_element.data.imageRotation = 0;
						} else {
							singleton.selected_element.data.imageRotation = parseInt(singleton.selected_element.data.imageRotation.toString()) + 90;
						}
						
					} else {
						
						if (parseInt(singleton.selected_element.data.imageRotation.toString()) - 90 == -90) {
							singleton.selected_element.data.imageRotation = 270;
						} else {
							singleton.selected_element.data.imageRotation = parseInt(singleton.selected_element.data.imageRotation.toString()) - 90;
						}
					}
					
					if (obj.constructor.toString() == "[class photocomponent]") {
						
						var po:photocomponent = obj as photocomponent;
						
						var i:Object = po.container.getElementAt(0) as Object;
						
						singleton.selected_element.data.scaling = 0;
						singleton.selected_element.imagezoom = 0;
						
						if (i.constructor.toString() == "[class Group]") {
							
							var gr:Group = i as Group;
							ImageContainerRotation = Math.round(gr.rotation);
							
							if (singleton.selected_element.data.imageRotation.toString() == "") {
								singleton.selected_element.data.imageRotation = 0;
							}
							
							singleton.selected_element.container_rotateHandler();	
							
						}
						
					}
					
					singleton._changesMade = true;
					singleton.UpdateWindowStatus();
					
					var editor:spreadEditor = FlexGlobals.topLevelApplication.viewer.getElementAt(0) as spreadEditor;
					editor.photomenu.UpdatePhotoMenu();
					
					FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
					
					singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
					
					//singleton.selected_element.parentObjectHandles.dispatchEvent(new ObjectChangedEvent([singleton.selected_element], ObjectChangedEvent.OBJECT_RESIZED, true));
				}	
			}
			
			private function zoomSlider_mouseDownHandler(event:Event):void {
				
				event.stopPropagation();
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				FlexGlobals.topLevelApplication.stage.addEventListener(MouseEvent.MOUSE_UP, updateScale);
				
				btnDelete.mouseEnabled = false;
				imageRotation.mouseEnabled = false;
				
			}
			
			public function updateScale(event:Event):void {
				
				FlexGlobals.topLevelApplication.stage.removeEventListener(MouseEvent.MOUSE_UP, updateScale);
				
				btnDelete.mouseEnabled = true;
				imageRotation.mouseEnabled = true;
				
				singleton.selected_element.parentObjectHandles.dispatchEvent(new ObjectChangedEvent([singleton.selected_element], ObjectChangedEvent.OBJECT_RESIZED, true));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			public function UpdatePhotoMenu():void {
				
				if (singleton.selected_element) {
					
					if (bordercolor) {
						bordercolor.selectedColor = singleton.selected_element.data.bordercolor;
						borderwidth.selectedIndex = singleton.GetBorderWeightIndex(singleton.selected_element.data.borderweight);
						borderalphaslider.value = singleton.selected_element.data.borderalpha * 100;
					}
					
					this.currentState = "basic";
					
					if (singleton.selected_element.constructor.toString() == "[class clipartcomponent]") {
						
						this.currentState = "clipart";
						
						if (bordercolor) {
							bordercolor.selectedColor = singleton.selected_element.data.borderweight;
						}
						
						if (singleton.selected_element.img) {
							
							if (bcNoshadow) {
								bcNoshadow.setStyle("backgroundAlpha", 0);
								bcLeftshadow.setStyle("backgroundAlpha", 0);
								bcRightshadow.setStyle("backgroundAlpha", 0);
								bcBottomshadow.setStyle("backgroundAlpha", 0);
								
								if (singleton.selected_element.data.shadow == "") {
									bcNoshadow.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.shadow == "left") {
									bcLeftshadow.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.shadow == "right") {
									bcRightshadow.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.shadow == "bottom") {
									bcBottomshadow.setStyle("backgroundAlpha", 1);
								}
								
							}
							
							if (alphaSlider) {
								alphaSlider.value = singleton.selected_element.data.imageAlpha * 100;
							}
						}
						
					}
					
					if (singleton.selected_element.constructor.toString() == "[class photocomponent]") {
						
						if (zoom) {
							zoom.value = (singleton.selected_element.imagezoom * 100) - 100;
						}
						
						if (singleton.selected_element.img) {
							
							this.currentState = "photo";
							
							if (singleton.selected_element.data.imageRotation.toString() == "") {
								singleton.selected_element.data.imageRotation = "0";
							} 
							
							if (bcNormal) {
							
								bcNormal.setStyle("backgroundAlpha", 0);
								bcSephia.setStyle("backgroundAlpha", 0);
								bcBW.setStyle("backgroundAlpha", 0);
							
								if (singleton.selected_element.data.imageFilter == "") {
									bcNormal.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.imageFilter == "bw") {
									bcBW.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.imageFilter == "sepia") {
									bcSephia.setStyle("backgroundAlpha", 1);
								}
							
							}
							
							if (bcNoshadow) {
								
								bcNoshadow.setStyle("backgroundAlpha", 0);
								bcLeftshadow.setStyle("backgroundAlpha", 0);
								bcRightshadow.setStyle("backgroundAlpha", 0);
								bcBottomshadow.setStyle("backgroundAlpha", 0);
								
								if (singleton.selected_element.data.shadow == "") {
									bcNoshadow.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.shadow == "left") {
									bcLeftshadow.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.shadow == "right") {
									bcRightshadow.setStyle("backgroundAlpha", 1);
								}
								if (singleton.selected_element.data.shadow == "bottom") {
									bcBottomshadow.setStyle("backgroundAlpha", 1);
								}
							}
							
							if (alphaSlider) {
								alphaSlider.value = singleton.selected_element.data.imageAlpha * 100;
							}
							
						} else {
							
							this.currentState = "basic";
						}
						
					}
				}
			}
			
			private function zoomSlider_mouseUpHandler(event:Event):void {
				
				FlexGlobals.topLevelApplication.stage.removeEventListener(MouseEvent.MOUSE_UP, updateScale);
				
				btnDelete.mouseEnabled = true;
				imageRotation.mouseEnabled = true;
				
				singleton.selected_element.data.refScale = zoom.value;
				
				singleton.selected_element.parentObjectHandles.dispatchEvent(new ObjectChangedEvent([singleton.selected_element], ObjectChangedEvent.OBJECT_RESIZED, true));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
			}
			
			protected function btnEffects_clickHandler(event:MouseEvent):void
			{
				
				var editor:spreadEditor = FlexGlobals.topLevelApplication.viewer.getElementAt(0) as spreadEditor;
				if ((this.y + bcEffects.height) > editor.elementcontainer.height) { 
					bcEffects.top = -(bcEffects.height + 5);
				} else {
					bcEffects.top = 35;
				}
				
				bcBorders.visible = false;
				bcShadows.visible = false;
				
				bcEffects.visible = !bcEffects.visible;
				
			}
			
			protected function btnBorders_clickHandler(event:MouseEvent):void
			{
				
				if ((this.y + bcBorders.height) > singleton.selected_spread_editor.height - 120) { 
					bcBorders.top = -(bcBorders.height + 5);
				} else {
					bcBorders.top = 35;
				}
				
				bcEffects.visible = false;
				bcShadows.visible = false;
			
				bcBorders.visible = !bcBorders.visible;
				
			}
			
			protected function btnShadows_clickHandler(event:MouseEvent):void
			{
				
				
				if ((this.y + bcShadows.height) > singleton.selected_spread_editor.height - 120) { 
					bcShadows.top = -(bcShadows.height + 5);
				} else {
					bcShadows.top = 35;
				}
				
				bcEffects.visible = false;
				bcBorders.visible = false;
				
				bcShadows.visible = !bcShadows.visible;
				
			}
			
			protected function normal_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var po:photocomponent = singleton.selected_element as photocomponent;
				var data:Object = po.data as Object;
				
				if (po.img) {
					po.img.filters = null;
					data.imageFilter = "";
				}
				
				bcNormal.setStyle("backgroundAlpha", 1);
				bcSephia.setStyle("backgroundAlpha", 0);
				bcBW.setStyle("backgroundAlpha", 0);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function sephia_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var po:photocomponent = singleton.selected_element as photocomponent;
				var data:Object = po.data as Object;
				
				if (po.img) {
					po.img.filters = null;
					po.img.filters = [singleton.sepiafilter];
					data.imageFilter = "sepia";
				}
				
				bcNormal.setStyle("backgroundAlpha", 0);
				bcSephia.setStyle("backgroundAlpha", 1);
				bcBW.setStyle("backgroundAlpha", 0);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function bw_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var po:photocomponent = singleton.selected_element as photocomponent;
				var data:Object = po.data as Object;
				
				if (po.img) {
					po.img.filters = null;
					po.img.filters = [singleton.bwfilter];
					data.imageFilter = "bw";
				}
				
				bcNormal.setStyle("backgroundAlpha", 0);
				bcSephia.setStyle("backgroundAlpha", 0);
				bcBW.setStyle("backgroundAlpha", 1);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function alphaSlider_changeHandler(event:Event):void
			{
				
				//Update the alpha
				var data:Object = singleton.selected_element.data as Object;
				
				if (singleton.selected_element.img) {
					singleton.selected_element.img.alpha = alphaSlider.value / 100;
					data.imageAlpha = alphaSlider.value / 100;
				}
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
			}
			
			protected function noshadow_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var data:Object = singleton.selected_element.data as Object;
				
				if (singleton.selected_element) {
					singleton.selected_element.filters = null;
					singleton.selected_element.data.shadow = "";
				}
				
				bcNoshadow.setStyle("backgroundAlpha", 1);
				bcLeftshadow.setStyle("backgroundAlpha", 0);
				bcRightshadow.setStyle("backgroundAlpha", 0);
				bcBottomshadow.setStyle("backgroundAlpha", 0);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function leftshadow_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var data:Object = singleton.selected_element.data as Object;
				
				if (singleton.selected_element) {
					singleton.selected_element.filters = [leftShadowFilter];
					singleton.selected_element.data.shadow = "left";
				}
				
				bcNoshadow.setStyle("backgroundAlpha", 0);
				bcLeftshadow.setStyle("backgroundAlpha", 1);
				bcRightshadow.setStyle("backgroundAlpha", 0);
				bcBottomshadow.setStyle("backgroundAlpha", 0);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function rightshadow_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var data:Object = singleton.selected_element.data as Object;
				
				if (singleton.selected_element) {
					singleton.selected_element.filters = [rightShadowFilter];
					singleton.selected_element.data.shadow = "right";
				}
				
				bcNoshadow.setStyle("backgroundAlpha", 0);
				bcLeftshadow.setStyle("backgroundAlpha", 0);
				bcRightshadow.setStyle("backgroundAlpha", 1);
				bcBottomshadow.setStyle("backgroundAlpha", 0);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function bottomshadow_clickHandler(event:MouseEvent):void
			{
				
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				var data:Object = singleton.selected_element.data as Object;
				
				if (singleton.selected_element) {
					singleton.selected_element.filters = [bottomShadowFilter];
					singleton.selected_element.data.shadow = "bottom";
				}
				
				bcNoshadow.setStyle("backgroundAlpha", 0);
				bcLeftshadow.setStyle("backgroundAlpha", 0);
				bcRightshadow.setStyle("backgroundAlpha", 0);
				bcBottomshadow.setStyle("backgroundAlpha", 1);
				
				FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
				
				singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				
			}
			
			protected function btnMoveToFront_clickHandler(event:MouseEvent):void
			{
				
				//Store for undo
				var oldData:Object;
				var _oldIndex:int;
				var _newIndex:int;
				//Move this object to the front
				for (var x:int=0; x < singleton.selected_spread.elements.length; x++) {
					if (singleton.selected_spread.elements.getItemAt(x) == singleton.selected_element.data) {
						//found it
						_oldIndex = x;
						var tempObj:Object = singleton.selected_spread.elements.getItemAt(singleton.selected_spread.elements.length - 1) as Object;
						singleton.selected_spread.elements.setItemAt(singleton.selected_spread.elements.getItemAt(x), singleton.selected_spread.elements.length - 1);
						singleton.selected_spread.elements.setItemAt(tempObj, x);
						singleton.selected_spread.elements.refresh();
						_newIndex = singleton.selected_spread.elements.length - 1;
						break;
					}
				}
				
				var editor:spreadEditor = FlexGlobals.topLevelApplication.viewer.getElementAt(0) as spreadEditor;
				
				var _source:Object;
				var _lastIndex:int;
				for (x=0; x < editor.elementcontainer.numElements; x++) {
					var obj:Object = editor.elementcontainer.getElementAt(x) as Object;
					if (obj.hasOwnProperty("data")) {
						if (obj.data.classtype.toString() == "[class userphotoclass]" ||
							obj.data.classtype.toString() == "[class usertextclass]" ||
							obj.data.classtype.toString() == "[class userrectangle]" ||
							obj.data.classtype.toString() == "[class usercircle]" ||
							obj.data.classtype.toString() == "[class userline]" ||
							obj.data.classtype.toString() == "[class userclipartclass]") {
							
							_lastIndex = x;
							
							if (obj.data == singleton.selected_element.data) {
								//found it, remember it for now
								if (!_source) {
									_source = editor.elementcontainer.getElementAt(x) as Object;
									oldData = singleton.CloneObject(_source.data);
									oldData.index = _oldIndex;
								}
							}
						}
					}
				}
				
				singleton.ReorderElements();
				
				//Get the index after the reorder
				_lastIndex = singleton.GetIndexAfterReorder(singleton.selected_element.id);
				
				if (_source) {
					editor.elementcontainer.setElementIndex(_source as IVisualElement, _lastIndex);
					_source.data.index = _newIndex;
				}
				
				singleton.selected_spread_item.MoveToFront(oldData);
				
				
			}
			
			protected function btnSendToBack_clickHandler(event:MouseEvent):void
			{
				
				//Store for undo
				var oldData:Object;
				var _oldIndex:int;
				var _newIndex:int;
				//Send this object to the back
				for (var x:int=0; x < singleton.selected_spread.elements.length; x++) {
					if (singleton.selected_spread.elements.getItemAt(x) == singleton.selected_element.data) {
						//found it
						_oldIndex = x;
						var currObj:Object = singleton.selected_spread.elements.getItemAt(x) as Object;
						//move the former one up
						for (var n:int=x-1; n > -1; n--) {
							var tempObj:Object = singleton.selected_spread.elements.getItemAt(n) as Object;
							singleton.selected_spread.elements.setItemAt(tempObj, n + 1);
						}
						singleton.selected_spread.elements.setItemAt(currObj, 0);
						singleton.selected_spread.elements.refresh();
						_newIndex = 0;
						break;
					}
				}
				
				var editor:spreadEditor = FlexGlobals.topLevelApplication.viewer.getElementAt(0) as spreadEditor;
				
				var _source:Object;
				var _firstIndex:int = -1;
				for (x=0; x < editor.elementcontainer.numElements; x++) {
					var obj:Object = editor.elementcontainer.getElementAt(x) as Object;
					if (obj.hasOwnProperty("data")) {
						if (obj.data.classtype.toString() == "[class userphotoclass]" ||
							obj.data.classtype.toString() == "[class usertextclass]" ||
							obj.data.classtype.toString() == "[class userrectangle]" ||
							obj.data.classtype.toString() == "[class usercircle]" ||
							obj.data.classtype.toString() == "[class userline]" ||
							obj.data.classtype.toString() == "[class userclipartclass]") {
							
							if (_firstIndex == -1) {
								_firstIndex = x;
							}
							
							if (obj.data == singleton.selected_element.data) {
								//found it, remember it for now
								if (!_source) {
									_source = editor.elementcontainer.getElementAt(x) as Object;
									oldData = singleton.CloneObject(_source.data);
									oldData.index = _oldIndex;
									break;
								}
							}
						}
					}
				}
				
				singleton.ReorderElements();
				
				if (_source) {
					editor.elementcontainer.setElementIndex(_source as IVisualElement, _firstIndex);
					_source.data.index = _newIndex;
				}
				
				singleton.selected_spread_item.SendToBack(oldData);
				
			}
			
			protected function btnFlipHorizontal_clickHandler(event:MouseEvent):void
			{
				
				if (singleton.selected_element) {
					
					singleton.selected_element.FlipHorizontal();
					
				}
			}
			
			protected function borderalphaslider_mouseDownHandler(event:MouseEvent):void
			{
				event.stopPropagation();
				oldData = singleton.CloneObject(singleton.selected_element.data);	
				borderalphaslider.addEventListener(MouseEvent.MOUSE_UP, UpdateUndo);
			}
			
			private function UpdateUndo(event:MouseEvent):void {
				
				borderalphaslider.removeEventListener(MouseEvent.MOUSE_UP, UpdateUndo);
				
				if (oldData) {
					singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				}
			}
			
			protected function slider_mouseDownHandler(event:MouseEvent):void
			{
				// STORE THE OLD DATA FOR LATER UNDO //
				oldData = singleton.CloneObject(singleton.selected_element.data);
				
				alphaSlider.addEventListener(MouseEvent.MOUSE_UP, UpdateUndoObjectAlpha);
				
			}
			
			private function UpdateUndoObjectAlpha(event:MouseEvent):void {
				
				alphaSlider.removeEventListener(MouseEvent.MOUSE_UP, UpdateUndoObjectAlpha);
				
				if (oldData) {
					singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
				}
			}
			
			protected function lstUsedColors_mouseUpHandler(event:MouseEvent):void
			{
				
				if (singleton.selected_element) {

					// STORE THE OLD DATA FOR LATER UNDO //
					oldData = singleton.CloneObject(singleton.selected_element.data);
					
					singleton.selected_element.data.bordercolor = uint(event.currentTarget.selectedItem);
					
					//Update the border
					singleton.selected_element.DrawBorder();
					
					FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, singleton.selected_element.data));
					
					singleton.selected_undoredomanager.AddUndo(oldData, singleton.selected_element, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(singleton.selected_element));
					
				}
			}
			
			protected function borderwidth_mouseDownHandler(event:MouseEvent):void
			{
				event.stopPropagation();
			}
			
			protected function dragHandle_mouseDownHandler(event:MouseEvent):void
			{
				singleton.selected_spread_editor.photomenu.startDrag();
			}
			
			protected function dragHandle_mouseUpHandler(event:MouseEvent):void
			{
				singleton.selected_spread_editor.photomenu.stopDrag();
				if (singleton._toolbarX != this.x || singleton._toolbarY != this.y) {
					singleton._toolbarX = this.x;
					singleton._toolbarY = this.y;
					singleton._toolbarMoved = true;
				}
			}
			
			protected function btnAlignLeft_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectAlignHoriLeft();
			}
			
			protected function btnAlignHorizontalCenter_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectAlignHoriCenter();
			}
			
			protected function btnAlignRight_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectAlignHoriRight();
			}
			
			protected function btnAlignTop_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectAlignVertTop();
			}
			
			protected function btnAlignVerticalCenter_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectAlignVertCenter();
			}
			
			protected function btnAlignBottom_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectAlignVertBottom();
			}
			
			protected function btnMakeSameWidth_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectHoriSameSize();	
			}
			
			protected function btnMakeSameHeight_clickHandler(event:MouseEvent):void
			{
				FlexGlobals.topLevelApplication.objectVertSameSize();
			}
			
			protected function btnApplyShadowToSpread_clickHandler(event:MouseEvent):void
			{
				
				var shadow:String = singleton.selected_element.data.shadow;
				
				for (var x:int=0; x < singleton.selected_spread_editor.elementcontainer.numElements; x++) {
					
					var obj:Object = singleton.selected_spread_editor.elementcontainer.getElementAt(x) as Object;
					
					if (obj.hasOwnProperty("data")) {
						
						if (obj.data.classtype == singleton.selected_element.data.classtype) {
							
							// STORE THE OLD DATA FOR LATER UNDO //
							oldData = singleton.CloneObject(obj.data);
							obj.data.shadow = shadow;
							
							switch (shadow) {
								case "": 
									obj.filters = null;
									break;
								case "left":
									obj.filters = [leftShadowFilter];
									break;
								case "bottom":
									obj.filters = [bottomShadowFilter];
									break;
								case "right":
									obj.filters = [rightShadowFilter];
									break;
							}
							
							FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, obj.data));
							
							singleton.selected_undoredomanager.AddUndo(oldData, obj, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(obj));
							
						}
					}
				}
			}
			
			protected function btnApplyBorderToSpread_clickHandler(event:MouseEvent):void
			{
				
				var borderWeight:Number = singleton.selected_element.data.borderweight;
				var borderColor:uint = singleton.selected_element.data.bordercolor;
				var borderAlpha:Number = singleton.selected_element.data.borderalpha;
				
				for (var x:int=0; x < singleton.selected_spread_editor.elementcontainer.numElements; x++) {
					
					var obj:Object = singleton.selected_spread_editor.elementcontainer.getElementAt(x) as Object;
					
					if (obj.hasOwnProperty("data")) {
						
						if (obj.data.classtype == singleton.selected_element.data.classtype) {
							
							// STORE THE OLD DATA FOR LATER UNDO //
							oldData = singleton.CloneObject(obj.data);
							obj.data.borderweight = borderWeight;
							obj.data.bordercolor = borderColor;
							obj.data.borderalpha = borderAlpha;
							
							//Update the border
							obj.DrawBorder();
			
							FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, obj.data));
							
							singleton.selected_undoredomanager.AddUndo(oldData, obj, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(obj));
							
						}
					}
				}
			}
			
			protected function btnApplyShadowToBook_clickHandler(event:MouseEvent):void
			{
				
				var shadow:String = singleton.selected_element.data.shadow;
				
				for (var x:int=0; x < singleton.selected_spread_editor.elementcontainer.numElements; x++) {
					
					var obj:Object = singleton.selected_spread_editor.elementcontainer.getElementAt(x) as Object;
					
					if (obj.hasOwnProperty("data")) {
						
						if (obj.data.classtype == singleton.selected_element.data.classtype) {
						
								// STORE THE OLD DATA FOR LATER UNDO //
							oldData = singleton.CloneObject(obj.data);
							obj.data.shadow = shadow;
							
							switch (shadow) {
								case "": 
									obj.filters = null;
									break;
								case "left":
									obj.filters = [leftShadowFilter];
									break;
								case "bottom":
									obj.filters = [bottomShadowFilter];
									break;
								case "right":
									obj.filters = [rightShadowFilter];
									break;
							}
							
							FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, obj.data));
							
							singleton.selected_undoredomanager.AddUndo(oldData, obj, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(obj));
							
						}
					}
				}
				
				//Now apply to all the other elements in the book
				for (x=0; x < FlexGlobals.topLevelApplication.lstSpreads.numElements; x++) {
					
					var spread:spreadItemRenderer = FlexGlobals.topLevelApplication.lstSpreads.getElementAt(x) as spreadItemRenderer;
					
					for (var y:int=0; y < spread.elementcontainer.numElements; y++) {
						
						obj = spread.elementcontainer.getElementAt(y) as Object;
						
						if (obj.hasOwnProperty("data")) {
							
							if (obj.data.classtype == singleton.selected_element.data.classtype) {
								
								obj.data.shadow = shadow;
							
								switch (shadow) {
									case "": 
										obj.filters = null;
										break;
									case "left":
										obj.filters = [leftShadowFilter];
										break;
									case "bottom":
										obj.filters = [bottomShadowFilter];
										break;
									case "right":
										obj.filters = [rightShadowFilter];
										break;
								}
							}
						}
						
					}
				}
			}
			
			protected function btnApplyBorderToBook_clickHandler(event:MouseEvent):void
			{
				
				var borderWeight:Number = singleton.selected_element.data.borderweight;
				var borderColor:uint = singleton.selected_element.data.bordercolor;
				var borderAlpha:Number = singleton.selected_element.data.borderalpha;
				
				for (var x:int=0; x < singleton.selected_spread_editor.elementcontainer.numElements; x++) {
					
					var obj:Object = singleton.selected_spread_editor.elementcontainer.getElementAt(x) as Object;
					
					if (obj.hasOwnProperty("data")) {
						
						if (obj.data.classtype == singleton.selected_element.data.classtype) {
							
							// STORE THE OLD DATA FOR LATER UNDO //
							oldData = singleton.CloneObject(obj.data);
							
							obj.data.borderweight = borderWeight;
							obj.data.bordercolor = borderColor;
							obj.data.borderalpha = borderAlpha;
						
							//Update the border
							obj.DrawBorder();
							
							FlexGlobals.topLevelApplication.dispatchEvent(new updateElementsEvent(updateElementsEvent.UPDATE, singleton.selected_spread.spreadID, obj.data));
							
							singleton.selected_undoredomanager.AddUndo(oldData, obj, singleton.selectedspreadindex, undoActions.ACTION_BORDER, singleton.GetRealObjectIndex(obj));
							
						}
					}
				}
				
				//Now apply to all the other elements in the book
				for (x=0; x < FlexGlobals.topLevelApplication.lstSpreads.numElements; x++) {
					
					var spread:spreadItemRenderer = FlexGlobals.topLevelApplication.lstSpreads.getElementAt(x) as spreadItemRenderer;
					
					for (var y:int=0; y < spread.elementcontainer.numElements; y++) {
						
						obj = spread.elementcontainer.getElementAt(y) as Object;
						
						if (obj.hasOwnProperty("data")) {
							
							if (obj.data.classtype == singleton.selected_element.data.classtype) {
								
								obj.data.borderweight = borderWeight;
								obj.data.bordercolor = borderColor;
								obj.data.borderalpha = borderAlpha;
								
								//Update the border
								obj.DrawBorder();
							}
						}
						
					}
				}
			}
			
			public function ShowExtraOptions():void {
				
				if (currentState == "photo") {
					
					currentState = "photoextra";
					
					
				} else {
					
					currentState = "photo";
						
				}
				
				FlexGlobals.topLevelApplication.MenuPosition();
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:HGroup paddingLeft="0" paddingRight="5" verticalAlign="middle" gap="4" height="30">
	
		<s:BorderContainer id="dragHandle" width="20" height="30" backgroundColor="0xD2D2D2" borderVisible="false"
						   mouseDown="dragHandle_mouseDownHandler(event)"
						   mouseUp="dragHandle_mouseUpHandler(event)">
			<s:Image source="@Embed('assets/icons/drag_handle.png')" height="25" width="14" horizontalCenter="0" verticalCenter="0" />
		</s:BorderContainer>
		
		<classes:menuButton id="btnDelete" width="22" height="22" 
							_text="&#xf014;" _font="_AppFontAwesome" _fontsize="18"
				     		buttonMode="true" click="{DeletePhoto()}"
					 		mouseChildren="false" toolTip="Verwijderen"
					 		useHandCursor="true"/>
		
		<mx:VRule includeIn="clipart, photo, photoextra" height="22" width="1" />
		
		<mx:VRule height="30" width="1" includeIn="multiselect" />
		
		<classes:menuButton id="btnAlignLeft" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe606;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnAlignLeft_clickHandler(event)"
							mouseChildren="false" toolTip="Links uitlijnen"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnAlignHorizontalCenter" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe608;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnAlignHorizontalCenter_clickHandler(event)"
							mouseChildren="false" toolTip="Horizontaal centreren"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnAlignRight" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe60b;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnAlignRight_clickHandler(event)"
							mouseChildren="false" toolTip="Rechts uitlijnen"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnAlignTop" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe601;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnAlignTop_clickHandler(event)"
							mouseChildren="false" toolTip="Bovenkant uitlijnen"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnAlignVerticalCenter" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe607;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnAlignVerticalCenter_clickHandler(event)"
							mouseChildren="false" toolTip="Verticaal centreren"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnAlignBottom" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe609;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnAlignBottom_clickHandler(event)"
							mouseChildren="false" toolTip="Onderkant uitlijnen"
							useHandCursor="true"/>
		
		<mx:VRule height="30" width="1" includeIn="multiselect" />
		
		<classes:menuButton id="btnMakeSameWidth" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe611;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnMakeSameWidth_clickHandler(event)"
							mouseChildren="false" toolTip="Zelfde breedte maken"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnMakeSameHeight" width="22" height="22"
							includeIn="multiselect"
							_text="&#xe612;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="btnMakeSameHeight_clickHandler(event)"
							mouseChildren="false" toolTip="Zelfde hoogte maken"
							useHandCursor="true"/>
		
		<classes:menuButton id="btnFlipHorizontal" width="22" height="22" includeIn="clipart,photo,photoextra" 
							_text="&#xe60d;" _font="_AppFontEnjoy" _fontsize="18"
							buttonMode="true" click="{btnFlipHorizontal_clickHandler(event)}"
					 		mouseChildren="false" toolTip="Horizontaal spiegelen"
					 		useHandCursor="true" />
		
		<classes:menuButton id="imageRotation" width="22" height="22" includeIn="photo,photoextra" 
							_text="&#xe60c;" _font="_AppFontEnjoy" _fontsize="18"
					 		buttonMode="true" click="{RotateImage(null)}"
					 		mouseChildren="false" toolTip="Foto binnen kader roteren"
					 		useHandCursor="true"/>
		
		<s:HSlider id="zoom" includeIn="photo,photoextra" change="zoomSlider_changeHandler(event)"
				   maximum="500" minimum="0" mouseDown="zoomSlider_mouseDownHandler(event)"
				   mouseUp="zoomSlider_mouseUpHandler(event)" skinClass="skins.ZoomSliderMinPlus"
				   stepSize="1" toolTip="Foto zoomen" width="80" uid="40" value="0" />
		
		<mx:VRule includeIn="clipart, photo, photoextra" height="22" width="1" />
		
		<classes:menuButtonSwf id="btnShadows" includeIn="clipart,photo,photoextra" 
							_source="@Embed('assets/handlers/schaduw.swf')" width="22" height="22" 
					 		buttonMode="true" click="btnShadows_clickHandler(event)" toolTip="Schaduw opties" />
		
		<classes:menuButtonSwf id="btnBorders" includeIn="clipart,photo,photoextra" _source="@Embed('assets/handlers/rand.swf')" width="22" height="22" 
					 buttonMode="true" click="btnBorders_clickHandler(event)" toolTip="Rand opties" />
		
		<classes:menuButtonSwf id="btnEffects" includeIn="photo,photoextra" _source="@Embed('assets/handlers/filters.swf')" width="22" height="22"
					 buttonMode="true" click="btnEffects_clickHandler(event)" toolTip="Filter opties" />
		
		<mx:VRule includeIn="clipart, photo, photoextra" height="22" width="1" />
		
		<classes:menuButtonSwf id="btnMoveToFront" includeIn="basic,clipart,photo,photoextra"
							   width="22" height="22" _source="@Embed('assets/icons/to_front.swf')"
							   buttonMode="true" click="{btnMoveToFront_clickHandler(event)}"
							   mouseChildren="false" toolTip="Naar voorgrond" useHandCursor="true"/>
		
		<classes:menuButtonSwf id="btnSendToBack" includeIn="basic,clipart,photo,photoextra"
							   width="22" height="22" _source="@Embed('assets/icons/to_back.swf')"
							   buttonMode="true" click="{btnSendToBack_clickHandler(event)}"
							   mouseChildren="false" toolTip="Naar achtergrond" useHandCursor="true"/>
		
		
	</s:HGroup>
	
	<!-- ****************************************
	Effects
	**************************************** -->
	<s:BorderContainer id="bcEffects" includeIn="clipart,photo,photoextra" visible="false" right="0"
					   top="35" backgroundColor="#D2D2D2" borderVisible="false" cornerRadius="0"
					   dropShadowVisible="false" fontSize="11" mouseChildren="true"
					   mouseEnabled="{bcEffects.visible}">
		<s:layout>
			<s:VerticalLayout gap="5" paddingBottom="10" paddingLeft="10" paddingRight="10"
							  paddingTop="10"/>
		</s:layout>
		
		<s:Label color="#000000" text="Filters:"/>
		
		<s:HGroup width="100%" gap="10" paddingLeft="0">
			
			<s:VGroup horizontalAlign="center" verticalAlign="top" gap="5"
					  paddingLeft="0" paddingRight="0" paddingTop="5" paddingBottom="5">
				<s:Group id="bcNormal">
					<s:Image id="normal" width="48" height="31" click="normal_clickHandler(event)"
							 source="@Embed('assets/handlers/filter-kleur.jpg')"/>
				</s:Group>
				<s:Label color="0" fontSize="10" text="Normaal"/>
			</s:VGroup>
			
			<s:VGroup horizontalAlign="center" verticalAlign="top" gap="5"
					  paddingLeft="0" paddingRight="0" paddingTop="5" paddingBottom="5">
				<s:Group id="bcBW">
					<s:Image id="bw" width="48" height="31"
							 source="@Embed('assets/handlers/filter-zwartwit.jpg')"
							 click="bw_clickHandler(event)"/>
				</s:Group>
				<s:Label text="Zwart/Wit" fontSize="10" color="0" />
			</s:VGroup>
			
			<s:VGroup horizontalAlign="center" verticalAlign="top" gap="5"
					  paddingLeft="0" paddingRight="0" paddingTop="5" paddingBottom="5">
				<s:Group id="bcSephia">
					<s:Image id="sephia" width="48" height="31"
							 source="@Embed('assets/handlers/filter-sepia.jpg')"
							 click="sephia_clickHandler(event)"/>
				</s:Group>
				<s:Label text="Sepia" fontSize="10" color="0" />
			</s:VGroup>
		</s:HGroup>
		
		<s:Line width="100%" depth="1">
			<s:stroke>
				<s:SolidColorStroke color="#D7D7D7" alpha="1" />
			</s:stroke>
		</s:Line>
		
		<s:HGroup width="100%" verticalAlign="middle" toolTip="Transparantie">
			
			<s:SWFLoader source="@Embed('assets/handlers/transparant.swf')" width="24" height="24" />
			
			<s:HSlider id="alphaSlider" width="100%" change="alphaSlider_changeHandler(event)"
					   maximum="100" minimum="0" skinClass="skins.ZoomSliderGray"
					   stepSize="1" value="100" uid="70"
					   toolTip="Achtergrond transparantie instellen" />
			
		</s:HGroup>
		
		
	</s:BorderContainer>
	
	<!-- ****************************************
	Border window
	**************************************** -->
	<s:BorderContainer id="bcBorders" includeIn="clipart,photo,photoextra" visible="false" right="0"
					   top="35" backgroundColor="#D2D2D2" borderVisible="false" cornerRadius="0"
					   dropShadowVisible="true" fontSize="11" mouseChildren="true"
					   mouseEnabled="{bcBorders.visible}"
					   width="240">
		<s:layout>
			<s:VerticalLayout gap="3" paddingBottom="0" paddingLeft="0" paddingRight="0"
							  paddingTop="10"/>
		</s:layout>
		
		<s:Label color="#000000" paddingTop="4" paddingLeft="10" text="Rand:" />
		
		<s:HGroup width="100%" gap="10" paddingLeft="10" verticalAlign="middle"> 
			
			<s:Image source="@Embed('assets/icons/border-weight-icon.png')"/>
			
			<s:DropDownList id="borderwidth" width="60" dataProvider="{singleton.borderArray}" 
							change="{borderwidth_changeHandler(event)}"
							mouseDown="borderwidth_mouseDownHandler(event)"
							skinClass="skins.dropDownSkin" selectedIndex="0" />
			
			<!--
			<s:ToggleButton id="btnEyeDropper" width="25" icon="@Embed('assets/iconset/colorpicker-grijs.png')"
							skinClass="skins.toggleButtonSkin" 
							click="{FlexGlobals.topLevelApplication.SetColorByEyeDropper(event)}"/>
			-->
			
			<mx:ColorPicker id="bordercolor" change="{bordercolor_changeHandler(event)}" />
			
		</s:HGroup>
		
		<s:BorderContainer width="100%" backgroundColor="#EAEAEA" borderVisible="false">
			<s:layout>
				<s:VerticalLayout gap="5" paddingLeft="10" paddingRight="10" />
			</s:layout>
			
			<s:Label color="#000000" paddingTop="4" text="Gebruikte kleuren" fontSize="9" />
			
			<s:List id="lstUsedColors" width="200" height="50" borderVisible="false"
					contentBackgroundAlpha="0.0" dataProvider="{singleton.lastusedcolors}"
					itemRenderer="itemrenderers.lastColorItemRenderer"
					mouseUp="lstUsedColors_mouseUpHandler(event)">
				<s:layout>
					<s:TileLayout columnWidth="20" rowHeight="20" horizontalGap="2" verticalGap="2" />
				</s:layout>
			</s:List>
			
			<!--
			<s:List id="lstThemeColors" height="32"
					borderVisible="false" 
					contentBackgroundAlpha="0"
					dataProvider="{singleton.lastusedcolors}"
					horizontalScrollPolicy="auto"
					verticalScrollPolicy="off"
					itemRenderer="itemrenderers.borderColorItemRenderer">
				<s:layout>
					<s:HorizontalLayout gap="2" columnWidth="20" 
								  horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
			</s:List>
			-->
		</s:BorderContainer>
		
		<mx:HRule width="100%" height="1" />
		
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="10" paddingRight="10">
			
			<s:SWFLoader source="@Embed('assets/handlers/transparant.swf')" width="22" height="22" />
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="borderalphaslider" maximum="100" minimum="0" skinClass="skins.ZoomSliderGray"
						   mouseDown="borderalphaslider_mouseDownHandler(event)" uid="100"
						   stepSize="1" value="100" change="{borderalpha_changeHandler(event)}"/>
			</s:HGroup>
			
		</s:HGroup>
		
		<s:HGroup width="100%" gap="10" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
			<s:Button id="btnApplyBorderToSpread" width="50%" height="25" label="Deze pagina"
					  click="btnApplyBorderToSpread_clickHandler(event)"
					  skinClass="skins.btnBlueSkin"/>
			<s:Button id="btnApplyToBook" width="50%" height="25" label="Hele boek"
					  click="btnApplyBorderToBook_clickHandler(event)"
					  skinClass="skins.btnBlueSkin"/>
		</s:HGroup>
		
	</s:BorderContainer>
	
	<!-- ****************************************
	Shadow window
	**************************************** -->
	<s:BorderContainer id="bcShadows" includeIn="clipart,photo,photoextra" visible="false"
					   right="0" top="35" backgroundColor="#D2D2D2" borderVisible="false"
					   cornerRadius="0" dropShadowVisible="true" fontSize="11" mouseChildren="true"
					   mouseEnabled="{bcShadows.visible}">
		<s:layout>
			<s:VerticalLayout gap="3" paddingBottom="10" paddingLeft="10" paddingRight="10"
							  paddingTop="10"/>
		</s:layout>
		
		<s:Label color="#000000" paddingTop="4" text="Schaduw:" /> 
		
		<s:BorderContainer id="bcNoshadow" backgroundColor="#EAEAEA" borderColor="#D2D2D2" borderWeight="1" 
						   click="noshadow_clickHandler(event)">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" gap="5" paddingLeft="5" paddingRight="5" />
			</s:layout>
			
			<s:SWFLoader id="noshadow" width="24" height="24" mouseEnabled="false"
						 source="@Embed('assets/handlers/geen-schaduw.swf')"/>
			
			<s:Label text="Geen schaduw" color="0" mouseEnabled="false" fontSize="9" />
			
		</s:BorderContainer> 
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:VGroup horizontalAlign="center" verticalAlign="top" gap="10"
					  paddingLeft="0" paddingRight="0" paddingTop="5" paddingBottom="5">
				<s:Group id="bcLeftshadow">
					<s:Image id="leftshadow" width="48" height="30" click="leftshadow_clickHandler(event)"
							 source="@Embed('assets/handlers/schaduw.png')"
							 filters="{[FlexGlobals.topLevelApplication.leftShadowFilter]}"/>
				</s:Group>
			</s:VGroup>
			
			<s:VGroup horizontalAlign="center" verticalAlign="top" gap="10"
					  paddingLeft="0" paddingRight="0" paddingTop="5" paddingBottom="5">
				<s:Group id="bcRightshadow">
					<s:Image id="rightshadow" width="48" height="30" click="rightshadow_clickHandler(event)"
							 source="@Embed('assets/handlers/schaduw.png')"
							 filters="{[FlexGlobals.topLevelApplication.rightShadowFilter]}"/>
				</s:Group>
			</s:VGroup>
			
			<s:VGroup horizontalAlign="center" verticalAlign="top" gap="10"
					  paddingLeft="0" paddingRight="0" paddingTop="5" paddingBottom="5">
				<s:Group id="bcBottomshadow">
					<s:Image id="bottomshadow" width="48" height="30" click="bottomshadow_clickHandler(event)"
							 source="@Embed('assets/handlers/schaduw.png')"
							 filters="{[FlexGlobals.topLevelApplication.bottomShadowFilter]}"/>
				</s:Group>
			</s:VGroup>
			
		</s:HGroup>
		
		<s:HGroup width="100%" gap="10" paddingTop="10" paddingBottom="10">
			<s:Button id="btnApplyToSpreadShadow" width="50%" height="25" label="Deze pagina"
					  click="btnApplyShadowToSpread_clickHandler(event)"
					  skinClass="skins.btnBlueSkin"/>
			<s:Button id="btnApplyToBookShadow" width="50%" height="25" label="Hele boek"
					  click="btnApplyShadowToBook_clickHandler(event)"
					  skinClass="skins.btnBlueSkin"/>
		</s:HGroup>
		
	</s:BorderContainer>
	
</s:BorderContainer>